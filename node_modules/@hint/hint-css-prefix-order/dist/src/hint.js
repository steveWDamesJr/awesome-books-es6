"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_debug_1 = require("@hint/utils-debug");
const utils_css_1 = require("@hint/utils-css");
const utils_types_1 = require("@hint/utils-types");
const meta_1 = require("./meta");
const i18n_import_1 = require("./i18n.import");
const debug = utils_debug_1.debug(__filename);
const validatePair = (pair) => {
    if (!pair.lastPrefixed || !pair.unprefixed) {
        return false;
    }
    const prefixedLocation = utils_css_1.getCSSLocationFromNode(pair.lastPrefixed) || { column: 0, line: 0 };
    const unprefixedLocation = utils_css_1.getCSSLocationFromNode(pair.unprefixed) || { column: 0, line: 0 };
    if (prefixedLocation.line < unprefixedLocation.line) {
        return false;
    }
    if (prefixedLocation.line > unprefixedLocation.line) {
        return true;
    }
    return prefixedLocation.column > unprefixedLocation.column;
};
const validateRule = (rule) => {
    const map = new Map();
    rule.each((decl) => {
        if (!('prop' in decl)) {
            return;
        }
        const name = decl.prop;
        const baseName = utils_css_1.getUnprefixed(name);
        const value = decl.value;
        const baseValue = utils_css_1.getUnprefixed(value);
        if (!map.has(baseName)) {
            map.set(baseName, {});
        }
        const pair = map.get(baseName);
        if (name === baseName && value === baseValue) {
            pair.unprefixed = decl;
        }
        else {
            pair.lastPrefixed = decl;
        }
    });
    return [...map.values()].filter(validatePair);
};
class CssPrefixOrderHint {
    constructor(context) {
        const formatMessage = (invalidPair) => {
            let name = invalidPair.unprefixed.prop;
            let prefixedName = invalidPair.lastPrefixed.prop;
            if (name === prefixedName) {
                name = `${invalidPair.unprefixed}`;
                prefixedName = `${invalidPair.lastPrefixed}`;
            }
            return i18n_import_1.getMessage('shouldBeListed', context.language, [name, prefixedName]);
        };
        context.on('parse::end::css', ({ ast, element, resource }) => {
            debug('Validating hint css-prefix-order');
            ast.walkRules((rule) => {
                for (const invalidPair of validateRule(rule)) {
                    const message = formatMessage(invalidPair);
                    const isValue = invalidPair.lastPrefixed.prop === invalidPair.unprefixed.prop;
                    const location = utils_css_1.getCSSLocationFromNode(invalidPair.unprefixed, { isValue });
                    const codeSnippet = utils_css_1.getFullCSSCodeSnippet(invalidPair.unprefixed);
                    const severity = utils_types_1.Severity.warning;
                    context.report(resource, message, { codeLanguage: 'css', codeSnippet, element, location, severity });
                }
            });
        });
    }
}
exports.default = CssPrefixOrderHint;
CssPrefixOrderHint.meta = meta_1.default;
