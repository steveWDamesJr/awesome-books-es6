"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_types_1 = require("@hint/utils-types");
const hint_scope_1 = require("hint/dist/src/lib/enums/hint-scope");
const i18n_import_1 = require("../i18n.import");
const meta = {
    docs: {
        category: utils_types_1.Category.accessibility,
        description: i18n_import_1.getMessage('keyboard_description', 'en'),
        name: i18n_import_1.getMessage('keyboard_name', 'en')
    },
    getDescription(language) {
        return i18n_import_1.getMessage('keyboard_description', language);
    },
    getName(language) {
        return i18n_import_1.getMessage('keyboard_name', language);
    },
    id: 'axe/keyboard',
    schema: [
        {
            additionalProperties: false,
            properties: {
                accesskeys: { enum: ['off', 'warning', 'error'], type: 'string' },
                bypass: { enum: ['off', 'warning', 'error'], type: 'string' },
                'focus-order-semantics': { enum: ['off', 'warning', 'error'], type: 'string' },
                'frame-focusable-content': { enum: ['off', 'warning', 'error'], type: 'string' },
                'nested-interactive': { enum: ['off', 'warning', 'error'], type: 'string' },
                region: { enum: ['off', 'warning', 'error'], type: 'string' },
                'scrollable-region-focusable': { enum: ['off', 'warning', 'error'], type: 'string' },
                'skip-link': { enum: ['off', 'warning', 'error'], type: 'string' },
                tabindex: { enum: ['off', 'warning', 'error'], type: 'string' }
            }
        },
        {
            items: {
                enum: ['accesskeys', 'bypass', 'focus-order-semantics', 'frame-focusable-content', 'nested-interactive', 'region', 'scrollable-region-focusable', 'skip-link', 'tabindex'],
                type: 'string'
            },
            typeof: 'array',
            uniqueItems: true
        }
    ],
    scope: hint_scope_1.HintScope.any
};
exports.default = meta;
